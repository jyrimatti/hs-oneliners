#! /bin/sh
set -eu

FILE_OR_PKGS=${PKGS:-$*}
ARGS=${ARGS:-}

export NIXPKGS_ALLOW_BROKEN=1
export NIXPKGS_ALLOW_UNFREE=1

if [ "$(uname -s)" = "Darwin" ]; then
    export NIX_PATH="nixpkgs=channel:nixpkgs-19.03-darwin"
    echo "Using darwin NIX_PATH: $NIX_PATH"
else
	export NIX_PATH="nixpkgs=channel:nixos-19.03"
	echo "Using standard NIX_PATH: $NIX_PATH"
fi

devtools="pkgconfig cabal-install"




case $FILE_OR_PKGS in
	*.cabal)
		nix-shell -p cabal2nix --run "cabal2nix --shell $(dirname $FILE_OR_PKGS) > /tmp/hs.nix"
		# orig_path trick because nix-shell orders path in an odd way: https://github.com/NixOS/nix/issues/1671
		nix-shell -p $devtools --command "export ORIG_PATH=\$PATH; nix-shell --pure --keep ORIG_PATH $ARGS --run 'cd $(dirname $FILE_OR_PKGS); PATH=\$PATH:\$ORIG_PATH cabal repl' /tmp/hs.nix"
		;;
	# Create shell environment based no a given nix file (e.g. ./default.nix)
	*.nix)
		# orig_path trick because nix-shell orders path in an odd way: https://github.com/NixOS/nix/issues/1671
		nix-shell -p $devtools --command "export ORIG_PATH=\$PATH; nix-shell --pure --keep ORIG_PATH $ARGS --run 'cd $(dirname $FILE_OR_PKGS); PATH=\$PATH:\$ORIG_PATH cabal repl' $FILE_OR_PKGS"
		;;
	*)
		nix-shell $ARGS -p "haskellPackages.ghcWithPackages (p: with p; [$devtools $FILE_OR_PKGS])" --run "ghci"
		;;
esac
